//简述：这两天学习了动态规划这种解决问题的思想，也是在为算法打基础！
// 关于动态规划一般思路：
(1). 将原问题分解为子问题
  1.把原问题分解为若干个子问题，子问题和原问题形式相同 或类似，只不过规模变小了。子问题都解决，原问题即解决
  2.子问题的解一旦求出就会被保存，所以每个子问题只需求 解一次。
(2).2. 确定状态
  1.在用动态规划解题时，一个“状态”对应于一个或多个子问题， 所谓某个“状态”下的“值”，就是这个“状 态”所对应的子问题的解。
  2.确定状态的值。
(3).确定一些初始状态(边界状态)的值
  1.以下面那道“数字三角形”为例，初始状态就是底边数字，值 就是底边数字值。
(4).确定状态转移方程(最重要的一步)
  1. 可以称做是递推式。
 例如数字三角形这道题的递推式：
                d[r][j]                                     r=n情况
 MaxSum[r][j]= {
                Max(MaxSum[r+1][j],MaxSum[r+1][j+1])+d[r][j]  其他情况
                
//关于能用动归解题的问题的特点：
1.问题具有最优子结构。原问题和子问题都是最优解。
2.无后校性。  当前状态只与前面状态的值有关，与过程无关。

//附上一个动态规划的入门题解：来源于poj上的一道题！
http://poj.org/problem?id=1163 

#include<algorithm>
#include<iostream>
#include<cstring>
#include<set>
#include<map>
#include<queue>
#include<stack>
#include<vector>
#include<cstdlib>
#include<string>
#include<cstdio> 
int n,a[105][105];
using namespace std;
int main()
{
	int i,j;
	scanf("%d",&n);
	for(i=1;i<=n;i++)
	{
		for(j=1;j<=i;j++)
		{
			scanf("%d",&a[i][j]);
		}
	}
	for(i=n-1;i>=1;i--)
	{
		for(j=1;j<=i;j++)
		{
			a[n][j]=max(a[n][j],a[n][j+1])+a[i][j]; //递推式
		}
	} 
	printf("%d\n",a[n][1]); 
	return 0;
}





