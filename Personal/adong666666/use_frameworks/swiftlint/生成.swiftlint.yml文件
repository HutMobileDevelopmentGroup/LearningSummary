我们要对项目的根目录进行操作，注意不是在swiftlint那个pod文件中操作

在根目录下，我们用
touch .swiftlint.yml
vim .swiftlint.yml

对所创建的文件进行操作
下面是我对Dreamlike的配置示例


disabled_rules: # 执行时排除掉的规则
  - force_try
  - force_cast
  - multiple_closures_with_trailing_closure
  #- empty_count
  #- colon
  #- comma
  #- control_statement
  #- cyclomatic_complexity
  #类似这些，都是警告前面的关键字 ，如警告：Multiple Closures with Trailing Closure Violation: Trailing closure syntax should not be used when passing more than one closure argument. (multiple_closures_with_trailing_closure)
  #取violation前面的关键字便是： multiple_closures_with_trailing_closure
opt_in_rules: # 一些规则仅仅是可选的
  #- missing_docs
  # 可以通过执行如下指令来查找所有可用的规则:
  # swiftlint rules
included: # 执行 linting 时包含的路径。如果出现这个 `--path` 会被忽略。
  #- Source
  - Dreamlike # 这里注意改成你自己的项目名称
excluded: # 执行 linting 时忽略的路径。 优先级比 `included` 更高。
  #- Carthage
  - Pods
  #- Source/ExcludedFolder
  #- Source/ExcludedFile.swift

# 可配置的规则可以通过这个配置文件来自定义
# 二进制规则可以设置他们的严格程度
force_cast: warning # 隐式
force_try:
  severity: warning # 显式
# 同时有警告和错误等级的规则，可以只设置它的警告等级
# 隐式
line_length: 120
# 可以通过一个数组同时进行隐式设置
type_body_length:
  - 300 # warning
  - 400 # error
# 或者也可以同时进行显式设置
function_parameter_count: 10
cyclomatic_complexity: 50
function_body_length:
  warning: 50
  error: 100 
file_length:
  warning: 500
  error: 1200
# 命名规则可以设置最小长度和最大程度的警告/错误
# 此外它们也可以设置排除在外的名字
type_name:
  min_length: 3 # 只是警告
  max_length: # 警告和错误
    warning: 40
    error: 50
  excluded: iPhone # 排除某个名字
identifier_name:
  min_length: # 只有最小长度
    error: 3 # 只有错误
  max_length:
    warning: 40  
    error: 50
  excluded: # 排除某些名字
    - x
    - y
    - id
    - URL
    - GlobalAPIKey
reporter: "xcode" # 报告类型 (xcode, json, csv, checkstyle, junit, html, emoji, sonarqube, markdown)
