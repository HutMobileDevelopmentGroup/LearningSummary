public var myCity = String()
一般是放在视图控制器外部，以引起注意



像这样子

public var myCity = String()

class shouyeViewController: 

看到这个全局变量我非常开心，因为它能够被我在所有视图控制器中拿到，所以我只要把当前所定位到的城市的字符串赋值给myCity,我就可以这不同页面
拿到当前城市了，非常的方便，我很开心，那么接下来，留下我处理获取当前定位城市的相关代码吧，另外，其实它也可以显示地图，不过是单纯地显示
地图，顺便会定位到你所在城市，然后显示，目前精确度最低应该是12m，


import MapKit
import CoreLocation

    var latitude :Double = 0.0
    var longitude :Double = 0.0
    var myLatitude :Double = 0.0
    var myLongitude :Double = 0.0
    var url = URL(string: "https://www.jd.com")
    var player : ZYPlayer?
    var locationManager :CLLocationManager?
    var mapView :MKMapView!
    var geoC :CLGeocoder?
    var str :String!
    var directions :MKDirections?
    
    
extension shouyeViewController{
    func usemap(){
        self.navigationItem.rightBarButtonItem = UIBarButtonItem.init(title: "规划", style: .plain, target: self, action:#selector(click))
        self.navigationItem.leftBarButtonItem = UIBarButtonItem.init(title: "导航", style: .plain, target: self, action:#selector(leftClick))
        createMap()
        createLocation()
        createGeoC1()
        self.mapView.frame = CGRect(x: 0.fitScreen, y: 9480.fitHeight, width: 414.fitScreen, height: 257)
    }
}

extension shouyeViewController{
    func createMap() -> Void {
        let frame = CGRect(x: 0.fitScreen, y: 480.fitHeight, width: 414.fitScreen, height: 257)
        mapView = MKMapView.init(frame: frame)
        mapView?.mapType = MKMapType.standard
        mapView?.showsScale = true
        mapView?.showsCompass = true
        mapView?.showsUserLocation = true
        mapView?.delegate = self
        self.view.addSubview(mapView!)
        
    }
    
    func createLocation() -> Void {
        
        if CLLocationManager.locationServicesEnabled() {
            print("可以定位")
            
            locationManager = CLLocationManager.init()
            locationManager?.delegate = self
            locationManager?.desiredAccuracy = kCLLocationAccuracyBest
            locationManager?.distanceFilter = 50
            if CLLocationManager.authorizationStatus() == .notDetermined {
                locationManager?.requestWhenInUseAuthorization()
            }
            locationManager?.startUpdatingLocation()
        }else{
            
            print("打开定位权限")
        }
    }
    
    
    func createGeoC1() -> Void {
        geoC = CLGeocoder.init()
        
        test()
    }
    
    //MARK: - CLLocationManagerDelegate
    
    //定位成功
    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        print("定位成功");
        
        //定位：
        let currLocation = locations.last
        
        //CLLocation *currLocation  =[locations lastObject];
        
        
        //重置定位
        var theCoordinate = CLLocationCoordinate2D()
        
        //latitude纬度
        theCoordinate.latitude = (currLocation?.coordinate.latitude)!;
        print(theCoordinate.latitude)
        //longitude经度
        theCoordinate.longitude = (currLocation?.coordinate.longitude)!;
        print(theCoordinate.longitude)
        myLatitude  = (currLocation?.coordinate.latitude)!;
        myLongitude = (currLocation?.coordinate.longitude)!;
        
        //定义显示的范围span范围
        var theSpan = MKCoordinateSpan()
        
        theSpan.latitudeDelta = 0.01;
        theSpan.longitudeDelta = 0.01;
        
        //定义显示的区域 region区域范围
        var theRegion =  MKCoordinateRegion()
        theRegion.center = theCoordinate
        theRegion.span = theSpan
        
        //设置地图显示
        mapView.region = theRegion
        //[self.mapView setRegion:theRegion];
        
        let geocoder = CLGeocoder()
        let location = CLLocation(latitude: theCoordinate.latitude, longitude: theCoordinate.longitude)
        geocoder.reverseGeocodeLocation(location){ (placeMarks:[CLPlacemark]?, error:Error?)
            ->Void in
            guard  let array = placeMarks! as NSArray? else { return }
            let mark = array.firstObject as!CLPlacemark
            let city: String = (mark.addressDictionary!as NSDictionary).value(forKey: "City")as! String
            myCity = city
            let url =  "https://free-api.heweather.com/s6/weather/"
            let location = city
            self.btn8.setTitle(city, for: .normal)
            let key = "54b1c13df75248dbba847b8f8d574a02"
            let params = ["location":location,
                          "key":key]
            Alamofire.request(url, parameters: params).responseJSON
                { response in
                    
                    //debugPrint(response)
                    if let json2 = response.result.value
                    {
                        //print("JSON: \(json2)")
                        let json  = JSON(json2)
                        self.btn7.text = aaa! + "  风向：" + bbb!
                        switch aaa!{
                        case"晴" : self.img4.image =  UIImage(named: "晴")
                        case"小雨" : self.img4.image = UIImage(named: "小雨")
                        case"中雨" : self.img4.image = UIImage(named: "中雨")
                        case"大雨" : self.img4.image = UIImage(named: "大雨")
                        case"多云" : self.img4.image = UIImage(named: "多云")
                        case"阴" : self.img4.image = UIImage(named: "阴")
                        case"暴雨" : self.img4.image = UIImage(named: "暴雨")
                        case"特大暴雨" : self.img4.image = UIImage(named: "特大暴雨")
                        case"雷阵雨伴有冰雹" : self.img4.image =  UIImage(named: "雷阵雨伴有冰雹")
                        case"小到中雨" : self.img4.image = UIImage(named: "小到中雨")
                        case"大到暴雨" : self.img4.image = UIImage(named: "大到暴雨")
                        case"暴雨到大暴雨" : self.img4.image = UIImage(named: "暴雨到大暴雨")
                        case"大暴雨到特大暴雨" : self.img4.image = UIImage(named: "大暴雨到特大暴雨")
                        case"中到大雨" : self.img4.image = UIImage(named: "中到大雨")
                        case"阵雨" : self.img4.image = UIImage(named: "阵雨")
                        case"雷阵雨" : self.img4.image = UIImage(named: "雷阵雨")
                        case"冻雨" : self.img4.image = UIImage(named: "冻雨")
                        case"中雪" : self.img4.image =  UIImage(named: "中雪")
                        case"小雪" : self.img4.image = UIImage(named: "小雪")
                        case"大雪" : self.img4.image = UIImage(named: "大雪")
                        case"雨夹雪" : self.img4.image = UIImage(named: "雨夹雪")
                        case"小到中雪" : self.img4.image = UIImage(named: "小到中雪")
                        case"中到大雪" : self.img4.image = UIImage(named: "中到大雪")
                        case"暴雪" : self.img4.image = UIImage(named: "暴雪")
                        case"阵雪" : self.img4.image = UIImage(named: "阵雪")
                        case"大到暴雪" : self.img4.image =  UIImage(named: "大到暴雪")
                        case"扬沙" : self.img4.image = UIImage(named: "扬沙")
                        case"浮尘" : self.img4.image = UIImage(named: "浮尘")
                        case"沙尘暴" : self.img4.image = UIImage(named: "沙尘暴")
                        case"强沙尘暴" : self.img4.image = UIImage(named: "强沙尘暴")
                        case"雾" : self.img4.image = UIImage(named: "雾")
                        case"霾" : self.img4.image = UIImage(named: "霾")
                        default: self.img4.image = UIImage(named:"")
                        }
                    }
            }
        }
    }
    
    //定位失败
    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {
        print("定位失败!详见：\(error)");
        
    }
    
    //方向更新
    func locationManager(_ manager: CLLocationManager, didUpdateHeading newHeading: CLHeading) {
        
    }
    
    
    func locationManagerShouldDisplayHeadingCalibration(_ manager: CLLocationManager) -> Bool {
        
        return true
    }
    
    
    //MARK:  地图代理方法
    func mapView(_ mapView: MKMapView, didUpdate userLocation: MKUserLocation) {
        
        userLocation.title = "现在位置"
        
        var theCoordinate = CLLocationCoordinate2D()
        
        //latitude纬度
        theCoordinate.latitude = userLocation.coordinate.latitude;
        //longitude经度
        theCoordinate.longitude = userLocation.coordinate.longitude;
        
        mapView.setCenter(theCoordinate, animated: true)
        
        
    }
    
    func mapView(_ mapView: MKMapView, regionWillChangeAnimated animated: Bool) {
        
    }
    
    func mapView(_ mapView: MKMapView, regionDidChangeAnimated animated: Bool) {
        
    }
    
    func mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView? {
        
        // 判断大头针位置是否在原点,如果是则不加大头针
        if annotation is MKUserLocation  {
            
            return nil
        }
        
        let inden = "pappap"
        var pin = mapView.dequeueReusableAnnotationView(withIdentifier: inden)
        
        if pin == nil {
            pin = MKAnnotationView.init(annotation: annotation, reuseIdentifier: inden)
            pin?.annotation = annotation
            //            pin?.canShowCallout = true
            //            pin?.isDraggable = true
            
        }
        
        pin?.image = UIImage(named: "map")
        let imageView = UIImageView.init(frame: CGRect(x: 0, y: 0, width: 20, height: 25))
        imageView.image = UIImage(named: "map1")
        //pin?.leftCalloutAccessoryView = imageView;
        pin?.detailCalloutAccessoryView = imageView
        return pin
        
    }
    
    
    func test() -> Void {
        
        geoC?.geocodeAddressString("张江药谷大厦", completionHandler: { (pls: [CLPlacemark]?, error: Error?)  in
            
            if error == nil {
                print("地理编码成功")
                guard pls != nil else {return}
                
                let firstPL = pls?.first
                // self.addressTV.text = firstPL?.name
                self.latitude = (firstPL?.location?.coordinate.latitude)!
                self.longitude = (firstPL?.location?.coordinate.longitude)!
                
                //计算两个坐标之间的位置
                let location1 = CLLocation.init(latitude: self.latitude, longitude: self.longitude)
                let location2 = CLLocation.init(latitude: self.myLatitude, longitude: self.myLongitude)
                let distance  = location1.distance(from: location2)
                self.str = String(format: "%", arguments: [distance/1000])
                self.addAnnoWithPT(pt: (firstPL?.location?.coordinate)!)
            }else {
                print("错误")
            }
        })
    }
    
    func addAnnoWithPT(pt:CLLocationCoordinate2D) -> Void {
        
        
        //创建一个大头针对象
        let objectAnnotation = MKPointAnnotation()
        
        //设置大头针的显示位置
        objectAnnotation.coordinate = CLLocation(latitude: pt.latitude,
                                                 longitude: pt.longitude).coordinate
        //设置点击大头针之后显示的标题
        objectAnnotation.title = self.str
        //设置点击大头针之后显示的描述
        objectAnnotation.subtitle = ""
        
        
        //添加大头针
        self.mapView.addAnnotation(objectAnnotation)
        //        let anno = myAnnotation.init()
        //
        //        anno.coordinate = pt
        //        anno.title = self.str!
        //
        //        self.mapView.addAnnotation(anno as! MKAnnotation)
    }
}
