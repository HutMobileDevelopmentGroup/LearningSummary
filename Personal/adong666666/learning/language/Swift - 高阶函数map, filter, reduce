Swift - 高阶函数map, filter, reduce



对于reduce

var values = [1,3,5] 
let initialResult = 0 
var reduceResult = values.reduce(initialResult, combine: { (tempResult, element) -> Int in 
return tempResult + element 
})


以上面为例，令初始值 initialResult = 0

在combine中，
tempResult = initialResult = 0
然后
tempResult += element

tempResult += 1    1
tempResult += 3    4
tempResult += 5    9

最后tempResult = 9
返回 9



闭包的简化， 上式又可以简化成

var values = [1,3,5] 
let initialResult = 0 
var reduceResult = values.reduce(initialResult, combine: { 
return $0 + $1 
})

var values = [1,3,5] 
var reduceResult = values.reduce(0) { 
return $0 + $1 
}


var values = [1,3,5] 
var reduceResult = values.reduce(0, combine: + ) //秀不秀




在swift中，对诸如Array, Dictionary集合类型使用map, filter, reduce进行操作是非常方便的事情，随着对swift语言的了解加深，开发者将越来越习惯、越来越喜欢这种抽象度较高的语法，但愿如此，[流汗]。如果你没有函数式语言编程的相关经验，在处理集合类型时，你的第一直觉可能是使用for-loop循环。本篇文章，是关于swift中map, filter, reduce的基本概念和使用的入门介绍，也是希望能借此文章帮助读者改变编程习惯和编程思维，提升swift开发效率。

Map 映射
swift-map
使用map的便利之处在于，它遍历一个集合对象，并可以将相同的操作应用于该对象的每一个元素。map函数返回了一个包含对该集合对象每一个元素进行相同操作、转换之后生成的新数值的数组。好吧，这句话好啰嗦。

我们可以使用for循环来计算一个数组中每个元素的平方值，如下代码所示，

let values = [2.0, 4.0, 5.0, 7.0]
var squares: [Double] = []
for value in values {
  squares.append(value*value)
}
这样的实现方式是可行的，但是我们先定义values和squares可变数组，接着遍历values，最后将平方值添加到squares数组，这样的代码有一点啰嗦。下面看一看，使用map来实现同样的功能，

let values = [2.0,4.0,5.0,7.0]
let squares = values.map { $0 * $0 }
// [4.0, 16.0, 25.0, 49.0]
这无疑是一个巨大的进步，我们无需使用for循环，因为map为我们处理了数组遍历。同样，squares直接定义为let，即不可变数组，我们甚至不必指定squares的类型，因为swift可以进行类型推断(infer)。

初次看见这样简短的闭包语法时，会感觉一脸懵逼。map函数有只有一个闭包（闭包也是函数）作为参数，当map对集合对象进行一次遍历时，闭包参数就执行一遍。这个闭包将集合对象中的元素作为参数，并返回一个新的值。最后map函数返回一个包含新的值的数组。

上面的代码是简写形式，现在将map函数的实现还原，这样更容易理解map函数发生了什么，如下代码，

let values = [2.0,4.0,5.0,7.0]
let squares2 = values.map({
  (value: Double) -> Double in
  return value * value
})
这个尾闭包只有一个参数，即：(value: Double)和 return Double，依据参数value的类型，所以swift可以推断返回值类型。同样，因为map函数只有一个闭包作为参数，所以我们也不需要参数(value: Double)两边()括号，甚至也不需要return关键字，那么map函数的参数可以用一行代码简写，如下代码所示，

let squares2 = values.map { value in value * value}
in关键字用来将闭包的参数和函数体隔开，如果你喜欢，可以使用数字化的参数进一步简写(use the numbered arguments shorthand)，如下代码，

let squares = values.map { $0 * $0 }
NOTE: $0表示当前遍历的集合对象中的一个元素，就这样，不要想得太复杂；也请多想一点点，查找相关资料多做了解。

map函数返回的数组包含元素类型并不会受限于原来数组中元素的类型，这句话通俗点说就是map函数之后，新数组元素类型和原数组元素类型不一定、不必须一样，不多说废话，这里有一个demo，将数组中的整型元素映射为字符串类型，如下代码，

let scores = [0,28,124]
let words = scores.map { NSNumberFormatter.localizedStringFromNumber($0, 
    numberStyle: .SpellOutStyle) }
// ["zero", "twenty-eight", "one hundred twenty-four"]
map函数也不仅仅只能用于数组(Array)，它可以用于任意的集合类型，比如字典(Dictionary)、数组(Array)、集合(Set)，看看下面的例子，将map用于字典和集合，需要注意的是，map的返回值总是一个数组(Array)，如下代码所示，

// 将公里转化为英里
let milesToPoint = ["point1":120.0,"point2":50.0,"point3":70.0]
let kmToPoint = milesToPoint.map { name,miles in miles * 1.6093 }
在上面的例子中，为了遍历字典(Dictionary)，我们对其使用map操作，map函数的参数是一个String类型和一个Double类型的变量，而该String和Double变量是由来自于字典(Dictionary)中每一个元素的key: value组成的。

小提示: 如果你不知道一个集合对象在使用map应该使用什么类型的参数，这时候可以借助Xcode自动补全的功能来查看参数的类型，如下图所示，

Xcode quick help
在集合(Set)使用map，如下简单代码，

let lengthInMeters: Set = [4.0, 6.2, 8.9]
let lengthInFeet = lengthInMeters.map {meters in meters * 3.2808}
在这个例子中，集合(Set)包含了3个Double类型的数据，所以使用map时候，闭包期望的参数也是Double类型。很好理解吧，嘿嘿！

Filter - 过滤 筛选
Filter，顾名思义，就是过滤、筛选的意思，对于一个集合对象而言，filter函数的作用是遍历该集合，然后将该集合中符合某些特定条件的元素组成新的数组，并返回该新数组，filter函数就是选择集合中符合条件的元素，过滤掉不符合条件的元素，如下图所示，

swift-filter
filter函数只有一个闭包作为参数，该闭包指定了筛选条件。该闭包使用集合对象中的一个元素作为参数，并且必须返回一个Bool值以表明该元素是否应该被包含新的数组中并返回。下面的例子，对一个数组使用filter操作，返回数组中所有的偶数(even--偶数竟然还有这意思，[手动尴尬] =_=|)，

let digits = [1, 4, 10, 15]
let even = digits.filter { $0 % 2 == 0 }
// [4, 10]
上面的例子是filter的简写形式，这有些高度抽象，如果读者认真阅读了文章或者查阅了资料，并不会感觉太难理解。filter函数比较完整的实现如下代码所示，

let digits = [1, 4, 5, 10, 15]
let even = digits.filter { (number) -> Bool in
    return number % 2 == 0
}
// [4, 10]
Reduce - 组合
Reduce，我所了解的英文翻译是减少、降低，在此处这样理解是不正确的，在swift函数式编程的概念中，reduce有“组合、归纳”的意思，使用reduce函数可以将一个集合中的所有元素组合起来，生成一个新的值并返回该值，如下图所示，简要说明了reduce的过程和作用，

swift-reduce
Reduce函数接收两个参数，一个初始值和一个组合闭包(combine closure)，例如，将一个数组中的各个元素与一个初始值10相加，可以使用reduce函数，如下代码所示，

let items = [2.0, 4.0, 5.0, 7.0]
let total = items.reduce(10, combine: +)
// 28.0
同样，这也适用于使用+将数组中的string进行拼接，如下代码，

let codes = ["abc", "def", "ghi"]
let text = codes.reduce("", combine: +)
// "abcdefghi"
Reduce函数的combine参数是一个闭包，所以我们也可以使用尾闭包的语法形式来编写reduce函数，如下代码所示，

let name = ["alan", "brian", "charlie"]
let scv = name.reduce("===") {
  text, name in "\(text), \(name)"
}
// "==, alan, brian, charlie"
这里有必要对代码做一点简单的解释，笔者一开始对闭包中的参数text, name的含义不太了解，后来请教了teamleader，才意识到name是数组中的一个元素，text相当于每一次操作将name拼接之后生成的值，此处text初始值是"==="，reduce函数执行结束之后，text是最终返回的值，即"==,alan,brian,charlie"。

FlatMap
Flat是什么意思呢？它表示平坦的、扁平的，这是它的形容词意思，它的动词意思有“使...扁平”，在swift中flatMap表示将多个集合对象扁平化为一个数组，这是笔者的观点，可以这么理解吗？下面的代码展示了最简单的flatMap使用，

let collections = [[5, 2, 7], [4, 8], [9, 1, 3]]
let flat = collections.flatMap { $0 }
// [5, 2, 7, 4, 8, 9, 1, 3]
甚至，flatMap还“知道”可选值的概念，它将会把集合中的nil元素移除掉，如下代码所示，

let people: [String?] = ["Tom", nil, "Peter", nil, "Harry"]
let valid = people.flatMap { $0 }
// ["Tom", "Peter", "Harry"]
再看看filter和flatMap组合使用的例子，先将一个数组中的多个字数组扁平化(flat)为一个数组，然后再使用过滤(filter)筛选出数组中的偶数，如下代码所示，

let collections = [[5, 2, 7], [4, 8], [9, 1, 3]]
// 此处even表示偶数
let onlyEven = collections.flatMap {
  intArray in intArray.filter { $0 % 2 == 0 }
  // result -- [2, 4, 8]
}
此处注意一下。flatMap遍历了collections数组中的包含整型数字的子数组，所以flatMap的参数是一个闭包，该闭包的参数是包含整型数字的数组，即[Int]。这段代码也可以使用更加简洁、更加晦涩难懂的闭包语法来编写，如下代码所示，

let collections = [[5, 2, 7], [4, 8], [9, 1, 3]]
let onlyEven = collections.flatMap { $0.filter { $0 % 2 == 0 }}
// result -- [2, 4, 8]
其实说晦涩难懂，也并不完全晦涩难懂，因为有了之前的基础知识介绍以及参考范例，相信大多数读者都能理解。

再看一个例子，将flatMap和map组合使用，为一个包含多个整型子数组的数组内的所有整型元素计算平方值，并将计算后的平方值放入新数组返回，这里我们提供两种方式来z实现这样一个需求，一种是简洁的闭包式的语法，另一种是完整的规范语法，如下代码所示，

let collections = [[5, 2, 7], [4, 8], [9, 1, 3]]
// 1. 简洁方式
let allSquared = collections.flatMap { $0.map { $0 * $0 }}
// 2. 完整方式
let allSquared2 = collections.flatMap { 
  intArray in intArray.map { $0 * $0 }
}

// result -- [25, 4, 49, 16, 64, 81, 1, 9]
关于flatMap，最后一个例子，使用flatMap和reduce来计算一个数组中所有整型子数组的内的所有元素相加计算的和(sum)，还是使用闭包的简写语法和完整的规范写法，如下代码所示，

let collections = [[5, 2, 7], [4, 8], [9, 1, 3]]
let sums = collections.flatMap { $0.reduce(0, combine:+) }
let sums2 = collections.flatMap { 
  intArray in intArray.reduce(0, combine:+)
}
Chaining 链式语法
我们可以通过链式语法来使用swift的map, filter, reduce以及flatMap，例如计算集合中大于等于7的数字的和，可以先使用filter筛选，然后在使用reduce求和，如下代码所示，

let marks = [4, 5, 8, 2, 9, 7]
let totalPass = marks.filter { $0 >= 7}.reduce(0, combine: +)
// result - 24
再比如，求一个数组中的元素的平方值是偶数的集合，可以先通过map计算所有平方值，然后在通过filter筛选出偶数，如下代码所示，

let numbers = [20, 17, 35, 4, 12]
let evenSquares = numbers.map { $0 * $0 }.filter { $0 % 2 == 0 }
// result -- 400, 16, 144
其实稍微思考也觉得这没什么高深，因为map和filter返回的是一个数组，我们当然可以对返回的数组继续使用map, filter, reduce以及flatMap操作。

总结
以后在使用swift编码的过程中，当你意识到自己在对一个集合对象进行遍历操作时，你该思考一下是否可以使用map, filter或者reduce函数来替代。

以下是总结了以下map, filter, reduce的特性，

map返回了一个结果集，该集合中包含的所有元素是来于对源数组中每一个元素进行相同的转换之后形成的新元素。
filter返回一个结果集，该集合包含的元素是源数组中的每一个符合筛选条件的元素。
reduce返回一个值，该值是对初始值和集合中的每个元素调用闭包中相同的操作生成的。
反思
在项目中经常看见神一样的map, filter, reduce以及flatMap的操作，不禁悠然神往，但是在每次小组会议时候，精通这方面知识的同事往往都一带而过，我也只能自己找一些文章来观摩学习，本文部分参考英文原文，也添加了自己的理解和想法，有错误或描述不够详尽的地方，也请读者指正。

另，文章中的配图来自于原文，本来笔者准备自己使用AXure来重绘配图，但是感觉未免画蛇添足，说不定会由于自己绘图错误导致误导读者。这几个配图很值得读者参考，请读者结合配图，思考并理解高阶函数作用的过程。

