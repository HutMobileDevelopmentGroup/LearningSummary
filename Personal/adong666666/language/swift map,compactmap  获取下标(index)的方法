
我是利用元组来实现的，其实用类或结构体等带有两个以上基础值的都可以来实现


举个栗子

//
//  DreamlikeTabBarController.swift
//  Dreamlike
//
//  Created by adong666666 on 2019/3/12.
//  Copyright © 2019 adong666666. All rights reserved.
//

import UIKit
import ESTabBarController_swift

class DreamlikeTabBarController: ESTabBarController{}

extension DreamlikeTabBarController{
    override func viewDidLoad() { allThings() }
}

fileprivate extension DreamlikeTabBarController{
    fileprivate func allThings(){
        super.viewDidLoad()
        provideStyle()
    }
}

fileprivate extension DreamlikeTabBarController{
    fileprivate func provideStyle(){
        let imageName = ["首页","商城","管家","订单","我的","首页2","商城2","管家2","订单2","我的2"]
        let ViewControllers = [(UIViewController(),0),(UIViewController(),1),(UIViewController(),2),
                               (UIViewController(),3),(UIViewController(),4)]
        self.setViewControllers(ViewControllers.compactMap{ (vc) -> (DLNavigationController) in
            vc.0.navigationItem.title = imageName[vc.1]
            let NavC = DLNavigationController(rootViewController: vc.0)
            let contentView = vc.1 != 2 ? DLBouncesContentView() : DLLottieAnimateContentView()
            let Img = vc.1 != 2 ? UIImage(named: imageName[vc.1]) : UIImage()
            let selectedImg = vc.1 != 2 ? UIImage(named: imageName[vc.1]) : UIImage()
            vc.0.tabBarItem = ESTabBarItem.init(contentView, title: nil, image: Img, selectedImage: selectedImg)
            return (NavC)
        }, animated: true)
        self.tabBar.tintColor = UIColor.init(r: 27, g: 199, b: 141)
        self.tabBar.backgroundColor = .white
    }
}





也可以用下面这个
        let controllers = [UIViewController(),UIViewController(),UIViewController(),
                           UIViewController(),UIViewController()]
        self.setViewControllers(controllers.enumerated().compactMap({ (vc) -> (DLNavigationController) in
            vc.element.navigationItem.title = imageName[vc.offset]
            let NavC = DLNavigationController(rootViewController: vc.element)
            let contentView = vc.offset != 2 ? DLBouncesContentView() : DLLottieAnimateContentView()
            let Img = vc.offset != 2 ? UIImage(named: imageName[vc.offset]) : UIImage()
            let selectedImg = vc.offset != 2 ? UIImage(named: imageName[vc.offset + 5]) : UIImage()
            vc.element.tabBarItem = ESTabBarItem.init(contentView, title: nil, image: Img, selectedImage: selectedImg)
            return (NavC)
        }), animated: true)






swift map reduce 获取下标(index)的方法

You can use enumerate
to convert a sequence (Array
, String
, etc.) to a sequence of tuples with an integer counter and and element paired together. That is:

let numbers = [7, 8, 9, 10]let indexAndNum: [String] = numbers.enumerate().map { (index, element) in 
    return "\(index): \(element)"
}
print(indexAndNum)// ["0: 7", "1: 8", "2: 9", "3: 10"]
Link to enumerate
definition
Note that this isn't the same as getting the index of the collection—enumerate
gives you back an integer counter. This is the same as the index for an array, but on a string or dictionary won't be very useful. To get the actual index along with each element, you can use zip:

let actualIndexAndNum: [String] = zip(numbers.indices, numbers).map { 
    "\($0): \($1)"
 }
print(actualIndexAndNum)// ["0: 7", "1: 8", "2: 9", "3: 10"]
When using an enumerated sequence with reduce
, you won't be able to separate the index and element in a tuple, since you already have the accumulating/current tuple in the method signature. Instead, you'll need to use .0
and .1
on the second parameter to your reduce
closure:

let summedProducts = numbers.enumerate().reduce(0)
 { (accumulate, current) in 
    return accumulate + current.0 * current.1
     //                         ^           ^ 
    //                        index      element
}
print(summedProducts) // 56
