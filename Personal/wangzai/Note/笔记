public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)解析

在写一个Fragment的时候，继承Fragment基类，然后，要重写的其中一个回调方法是onCreateView。如果该Fragment有界面，
那么，返回的View是非空的；如果该Fragment是没有界面的，返回的是Null。当Fragment所依附的container，从有到无，
就会导致container为空。空表示，当前Fragment所依附的ViewGroup不存在了(从有到没，一开始是有的)。
View是绘制在屏幕上的用户能与之交互的一个对象。而ViewGroup则是一个用于存放其他View（和ViewGroup）对象的布局容器！



LayoutInflater作用及使用 
作用：
1.对于一个没有被载入或者想要动态载入的界面, 都需要使用inflate来载入. 
2、对于一个已经载入的Activity, 就可以使用实现了这个Activiyt的的findViewById方法来获得其中的界面元素. 
使用：
通过LayoutInflater inflater = getLayoutInflater();来获得界面.然后使用inflate方法来载入layout的xml。

Bundle savedInstanceState
onCreate方法的参数是一个Bundle类型的参数，savedInstanceState是保存Activity的状态的。
 在实际应用中，当一个Activity结束前，如果需要保存状态，就在onsaveInstanceState中，
 将状态数据以key-value的形式放入到savedInstanceState中。这样，当一个Activity被创建时，
 就能从onCreate的参数savedInsanceState中获得状态数据。

Toast
Toast是Android中用来显示显示信息的一种机制，和Dialog不一样的是，Toast是没有焦点的，而且Toast显示的时间有限，过一定的时间就会自动消失

配置adb环境
在系统环境变量里找到Path
编辑 新建
将platform-tools目录配置进去即可




三种Android图片压缩方法总结。

一、图片质量压缩
/**  
     * 质量压缩方法  
     */    
    public static Bitmap compressImage(Bitmap image) {    
        ByteArrayOutputStream baos = new ByteArrayOutputStream();    
        image.compress(Bitmap.CompressFormat.JPEG, 100, baos);// 质量压缩方法，这里100表示不压缩，把压缩后的数据存放到baos中    
        int options = 90;    
        while (baos.toByteArray().length / 1024 > 100) { // 循环判断如果压缩后图片是否大于100kb,大于继续压缩    
            baos.reset(); // 重置baos即清空baos    
            image.compress(Bitmap.CompressFormat.JPEG, options, baos);// 这里压缩options%，把压缩后的数据存放到baos中    
            options -= 10;// 每次都减少10    
        }    
        ByteArrayInputStream isBm = new ByteArrayInputStream(baos.toByteArray());// 把压缩后的数据baos存放到ByteArrayInputStream中    
        Bitmap bitmap = BitmapFactory.decodeStream(isBm, null, null);// 把ByteArrayInputStream数据生成图片    
        return bitmap;    
    } 
二、按比例大小压缩 （路径获取图片）

    /**  
         * 图片按比例大小压缩方法  
         * @param srcPath （根据路径获取图片并压缩）  
         */    
        public static Bitmap getimage(String srcPath) {    
        
            BitmapFactory.Options newOpts = new BitmapFactory.Options();    
            // 开始读入图片，此时把options.inJustDecodeBounds 设回true了    
            newOpts.inJustDecodeBounds = true;    
            Bitmap bitmap = BitmapFactory.decodeFile(srcPath, newOpts);// 此时返回bm为空    
            newOpts.inJustDecodeBounds = false;    
            int w = newOpts.outWidth;    
            int h = newOpts.outHeight;    
            // 现在主流手机比较多是800*480分辨率，所以高和宽我们设置为    
            float hh = 800f;// 这里设置高度为800f    
            float ww = 480f;// 这里设置宽度为480f    
            // 缩放比。由于是固定比例缩放，只用高或者宽其中一个数据进行计算即可    
            int be = 1;// be=1表示不缩放    
            if (w > h && w > ww) {// 如果宽度大的话根据宽度固定大小缩放    
                be = (int) (newOpts.outWidth / ww);    
            } else if (w < h && h > hh) {// 如果高度高的话根据宽度固定大小缩放    
                be = (int) (newOpts.outHeight / hh);    
            }    
            if (be <= 0)    
                be = 1;    
            newOpts.inSampleSize = be;// 设置缩放比例    
            // 重新读入图片，注意此时已经把options.inJustDecodeBounds 设回false了    
            bitmap = BitmapFactory.decodeFile(srcPath, newOpts);    
            return compressImage(bitmap);// 压缩好比例大小后再进行质量压缩    
        }    
        
三、按比例大小压缩 （Bitmap）
    /**  
         * 图片按比例大小压缩方法  
         * @param image （根据Bitmap图片压缩）  
         */    
        public static Bitmap compressScale(Bitmap image) {    
            ByteArrayOutputStream baos = new ByteArrayOutputStream();    
            image.compress(Bitmap.CompressFormat.JPEG, 100, baos);    
            // 判断如果图片大于1M,进行压缩避免在生成图片（BitmapFactory.decodeStream）时溢出    
            if (baos.toByteArray().length / 1024 > 1024) {    
                baos.reset();// 重置baos即清空baos    
                image.compress(Bitmap.CompressFormat.JPEG, 80, baos);// 这里压缩50%，把压缩后的数据存放到baos中    
            }    
            ByteArrayInputStream isBm = new ByteArrayInputStream(baos.toByteArray());    
            BitmapFactory.Options newOpts = new BitmapFactory.Options();    
            // 开始读入图片，此时把options.inJustDecodeBounds 设回true了    
            newOpts.inJustDecodeBounds = true;    
            Bitmap bitmap = BitmapFactory.decodeStream(isBm, null, newOpts);    
            newOpts.inJustDecodeBounds = false;    
            int w = newOpts.outWidth;    
            int h = newOpts.outHeight;    
            Log.i(TAG, w + "---------------" + h);    
            // 现在主流手机比较多是800*480分辨率，所以高和宽我们设置为    
            // float hh = 800f;// 这里设置高度为800f    
            // float ww = 480f;// 这里设置宽度为480f    
            float hh = 512f;    
            float ww = 512f;    
            // 缩放比。由于是固定比例缩放，只用高或者宽其中一个数据进行计算即可    
            int be = 1;// be=1表示不缩放    
            if (w > h && w > ww) {// 如果宽度大的话根据宽度固定大小缩放    
                be = (int) (newOpts.outWidth / ww);    
            } else if (w < h && h > hh) { // 如果高度高的话根据高度固定大小缩放    
                be = (int) (newOpts.outHeight / hh);    
            }    
            if (be <= 0)    
                be = 1;    
            newOpts.inSampleSize = be; // 设置缩放比例    
            // newOpts.inPreferredConfig = Config.RGB_565;//降低图片从ARGB888到RGB565    
            // 重新读入图片，注意此时已经把options.inJustDecodeBounds 设回false了    
            isBm = new ByteArrayInputStream(baos.toByteArray());    
            bitmap = BitmapFactory.decodeStream(isBm, null, newOpts);    
            return compressImage(bitmap);// 压缩好比例大小后再进行质量压缩    
            //return bitmap;    
        }    
